template是一個抽象的概念

在嚴謹程度高如C++的程式語言中，只要是抽象就有可能發生危險，所以在這宣告型態為template時，他只是一個殼，沒有內容。

為了怕使用者忘了宣告，和保證c++的嚴謹程度，一般在使用template時都會規定要宣告內容是要裝什麼。

所以不論是函式、struct、class等無一例外，最前面都需要加入 template <class T>，這個殼，而使用時一定要宣告殼裡面是什麼東西
ex: 
template<class NoMind, class Other, ...> //宣告殼
class tmp
{
  NoMind a;
}
tmp<int, char, ...> helloworld; //宣告內容

現今template並非全都適用於所有瀏覽器，template中有些宣告是被禁止的ex: template<string, 浮點數(float, double)>


/******************************************************************/
virtual member functions

member function template 不能宣告為template這與編譯時預留的空間有關
編譯器需要知道有多少member function template需要被具現化
template <typename T>
class Dynamic{
public:
	virtual ~Dynamic(); //OK，解構
	
	virtual funTmp(); //OK，class在被具現化時，有被定義

	template <typename T2>
	virtual void copy(T2 const&); //ERROR，編譯器此時不知道在一個具現體中多少具現體，無法備妥虛擬表格(virtual table, vtbl)
};

//反正就是不能那樣寫就對了，寫了也會錯
