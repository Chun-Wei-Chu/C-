fork & thread
在windows系統中並無簡易的函式能使用fork，如果要創建完整獨立的process只能透過開心的process達成
而在windows多數系統中有動態配置process總資源的功能，所以開多thread時會產生壅擠的狀況，而迫使系統動態調大單一process總資源
，以至於會有種開多 thread會使效能變好類似fork的錯覺，但當索取資源也是有上限存在，避免惡意程式占用過多資源，所以開多thread只能說
是盡量接近unix fork的做法，不能能稱作實質的替代方案。

fork是unix系統的特色之一，早期是為了方便多人使用環境的開發而誕生

/********************************************************************************************/
虛函式:
  virtual void functionName()

  通常class會透過繼承來使用一些通用函式
  class b : public a
  
  但他們的部分函式可能不同
  class a{ 
    public: int fun(){return 1;}
  }
  class b : public a{ 
    public: int fun(){return 2;}
  }
  此時，各自呼叫其各自函式是不會有問題的
  但如果想要使用需要傳入 class a 而運行的function 時就會有選擇問題，畢竟該functin是為了 class a 而設計
  例如: 
  int function forA(a v){
    return v.fun();
  }
  這時運行 
  b t;
  forA(t);
  這邊的forA會執行 class a中的fun()
  
  為了避免與預期不符的狀況發生我們會需要 virual function
  也就是告訴 forA說，我們的functino並定下來，所以要等實際傳入才會知道，改寫class a
  class a{ 
    public: virtual int fun(){return 1;}
  }
  
  參考(這個例子能感受到他的真理但要表達還是要看個人):
    http://stackoverflow.com/questions/2391679/why-do-we-need-virtual-methods-in-c

/********************************************************************************************/
純虛函式:
  就是，如果要繼承必須要自己實作，而不是說如果不做就參照繼承對象的內容
  
  參考:
    http://openhome.cc/Gossip/CppGossip/PureVirtualFunction.html

/********************************************************************************************/
smart point:
  懶人用避免memory leak工具
  如果沒有用到後會自動釋放記憶體空間(感覺就很像js 的 garbage collector)
  (C++就是一直為了世界潮流而改變自己的語言，然後越長越大，畢竟為了避免語法混淆，所以越後面的功能會長越醜)
  
  用法:
    vector<int>* pVec = new vector<int>();
    pVec->push_back( 1 );
    cout << pVec->size() << endl;
    delete pVec;
    
    改成>>
    
    unique_ptr< vector<int> > pVec( new vector<int>() );
    pVec->push_back( 1 );
    cout << pVec->size() << endl;
  
  重點在於不用自己刪
  
  參考:
    https://kheresy.wordpress.com/2012/03/03/c11_smartpointer_p1/
    
/********************************************************************************************/
Template:
  新世代的大魔王，長超醜，但聽說異常好用(阿就泛型阿)
  
  參考:
    http://hatsukiakio.blogspot.tw/2009/05/c-template.html

/********************************************************************************************/
Function Pointer:
  幹掉上一隻大魔王Template之後剩下的東西就是小菜嚕
  
  參考:
    https://kheresy.wordpress.com/2010/11/03/function_pointer/
    
/********************************************************************************************/
cout不是萬能:
  印不出string，所以要在後面+ .c_str()

/********************************************************************************************/
typedef shared_ptr<EmailHeader> EmailHeader_ptr;
typedef vector<EmailHeader_ptr> EmailHeader_ptrs;

EmailHeader_ptr tmpReciever(new EmailHeader);

template<typename T1, typename T2, template<typename>> //要求帶一個參數

/********************************************************************************************/
polymorphism(多型)、overriding(覆寫)、overloading(多載)

// Superclass(父類別)
class Animal(){
	void sound(){
	}
}

// Subclass(子類別)
class Dog extends Animal{
	// 覆寫 Animal.sound()
	void sound(){
		汪汪;
	}
	// 多載 Dog.sound()
	void sound(int i){
	}
	// 多載 Dog.sound()
	void sound(String s, int i){
	}
}

// Subclass(子類別)
class Cat extends Animal{
	// 覆寫 Animal.sound()
	void sound(){
		喵喵();
	}
}

// main
void main(){
	// 以父類建立具有子類方法的物件
	Animal dog = new Dog();
	Animal cat = new Cat();
	// 以子類建立具有父類方法的物件，執行產生錯誤(runtime error)
	Dog d = (Dog)new Animal();
	..
	..
	dog.sound(); // 將會執行"汪汪();
}

※polymorphism(多型)：在main()裡dog、cat的宣告方式即稱為多型。
須注意的是因Dog、Cat為繼承Animal的子類，所以Animal所有(default以上)的方法Dog、Cat類別都具有。
但是Animal不能確保擁有Dog、Cat所擁有的方法，因此反過來宣告則會在執行時期產生錯誤。
就以dog來說，dog雖是屬於Animal的物件，但是其中方法的部分只要Dog類別有覆寫，就會以Dog的為主。
簡單來說，就是將Dog(子)類別所有覆寫(overriding)的方法複製貼上到Animal(父)類別的方法上並且宣告出dog物件。

※overriding(覆寫)：Dog類別和Cat類別皆是繼承Animal的子類別，在其中各自改寫了sound()的方法，此稱之。
須注意的是【同型別】並且【同參數】才是覆寫，若【不同型別】卻【同參數】則會發生編譯錯誤

※overloading(多載)：在Dog類別裡有兩個sound()方法但參數不同，會在呼叫時依照給予的參數決定使用哪一個sound方法
須注意的是【同型別】並且【不同參數】或【不同型別】並且【不同參數】才是多載

by:https://gist.github.com/HabaCo/a2c8ed62efc1b5d42a1c
